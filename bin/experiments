#!/bin/bash

function msg {
  echo "================================================================"
  echo "===   $1"
}

MATLAB_PATH=/usr/local/MATLAB/R2015b
EXTRAS=${HOME}/clang-llvm/llvm/tools/clang/lib/Headers/

QCLANG_STATUS=${HOME}/qclang-status
CLANG=${HOME}/qclang/build/qclang
QVTRACE=${HOME}/qvtrace
DIR=~/compiled_models
ARGS="-- -I$MATLAB_PATH/extern/include/ -I$MATLAB_PATH/simulink/include/ -I. -I$EXTRAS -fparse-all-comments"
SUFFIX=_ert_rtw

MODELS=${QVTRACE}/testing/models
CLI=${QVTRACE}/engine/cli

function run_qclang_on_model {
  msg "Running qclang on $*"
  if [ $# == 1 ]; then
      $CLANG $(find $DIR/$1$SUFFIX -name '*.c') $ARGS
  elif [ $# == 2 ]; then
      merge=$MODELS/$1/$2.qvt
      if [ ! -f $merge ]; then
          echo "Merge qvt file not found:" $merge
          exit 1;
      fi
      $CLANG $(find $DIR/$1$SUFFIX -name '*.c') -merge-qvt=$merge $ARGS
  else
      "Invalid # of arguments to run_qclang_on_model"
      exit 1;
  fi
}

function trim_file {
  # Remove trailing whitespace and blank lines.
  sed -i 's/[ \t]*$//' $1
  sed -i '/^$/d' $1
}

function run_all_models {
  cd $DIR
  for dir in `echo qra/* lm/*`; do
    if [[ "$dir" == *$SUFFIX ]]; then
      run_qclang_on_model ${dir}/$SUFFIX/
    fi
  done
}

function cli_result {
    if grep -q 'Violation found' ${1};
        then echo "invalid"
    elif grep -q 'No violations are possible' ${1};
        then echo "valid"
    elif grep -q 'Unknown' ${1}
        then echo "unknown"
    else
        echo "ERROR: cli_result $1"
        exit 1
    fi
}

function diff_model {
  model=$1
  echo "$model"
  out=${QCLANG_STATUS}/out/${model}
  mkdir -p $(dirname "$out")

  CFILE=$DIR/${model}$SUFFIX/$(basename $model).c
  if grep -q 'no output/update code required' $CFILE; then
    echo $1.c >> ${QCLANG_STATUS}/QCLANG_NO_STEP_FUNCTION
    echo '  (NO STEP)'
    return
  fi
  $CLANG $(find $DIR/${model}$SUFFIX -name '*.c') $ARGS > ${out}.qvt
  trim_file ${out}.qvt

  if grep -q '"objectType" : "Error"' ${out}.qvt; then
    echo ${model}.qvt: >> ${QCLANG_STATUS}/QCLANG_ERROR
    grep '"message" :' ${out}.qvt | sed 's/^[ \t]*"message" : "/  /;s/"$//' | sed 's/",$//' >> ${QCLANG_STATUS}/QCLANG_ERROR
    echo '  (QCLANG ERROR)'
    return
  fi

  errors=no
  bases=""
  for f in $(find ${MODELS}/${model} -name '*.qvt' | sort); do
    base=`echo $f | rev | cut -d/ -f1 | rev | cut -d. -f1`
    out=${QCLANG_STATUS}/out/${model}-${base}

    $CLANG $(find $DIR/${model}$SUFFIX -name '*.c') -merge-qvt=$MODELS/${model}/$base.qvt $ARGS > ${out}.qvt
    trim_file ${out}.qvt

    if grep -q Error ${out}.qvt; then  # Never happens, I think.
      # echo ${model}-$base.qvt: `grep message ${out}.qvt | head -1 | sed 's/^[ \t]*"message" : "//;s/"$//'`>> ${QCLANG_STATUS}/QCLANG_ERROR
      echo " " $base.qvt "(USER CONSTRAINT ERROR)"
      echo "" $model-$base.qvt >> ${QCLANG_STATUS}/QCLANG_ERROR
      grep message ${out}.qvt | sed 's/^[ \t]*"message" : "/  /;s/"$//' | sed 's/",$//' >> ${QCLANG_STATUS}/QCLANG_ERROR
      errors=yes
      continue
    fi

    timeout 10 $CLI ${out}.qvt 1>${out}.out 2>${out}.err
    if [ $? -eq 124 ]; then
        echo "  $base (TIMEOUT)"
        echo "${model}-${base}.qvt: (TIMEOUT)" >> ${QCLANG_STATUS}/CLI_ERROR
        errors=yes
        rm -f ${out}.err
        continue
    fi

    if [ -s ${out}.err ]; then
        echo "  $base (CLI ERROR)"
        echo ${model}-${base}.qvt: `head -1 ${out}.err | sed 's/.*\(Exception\|Error\)://'` >> ${QCLANG_STATUS}/CLI_ERROR
        errors=yes
        continue
    else
        rm -f ${out}.err
    fi

    z3out=$MODELS/${model}/${base}.z3.cli.out
    if [ ! -f ${z3out} ]; then
        echo "  $base (NO $z3out)"
        echo "${model}-${base}.out: No ${z3out}" >> ${QCLANG_STATUS}/Z3_MISSING
        errors=yes
        continue
    fi

    new=$(cli_result ${out}.out)
    old=$(cli_result $MODELS/${model}/${base}.z3.cli.out)
    if [ $new == $old ]; then
        echo "  $base"
        bases="${bases} ${base}"
    else
        echo "  $base (FAIL $new != $old)"
        echo ${model}-${base}.out: $new should be $old  >> ${QCLANG_STATUS}/CLI_DIFF
        errors=yes
    fi
  done
  if [ $errors == no ]; then
      echo ${model}:${bases} >> ${QCLANG_STATUS}/PASS
  fi
}

function diff_all_models {
  rm -rf out
  rm -f CLI_* C_NOT_FOUND QCLANG_* PASS Z3_MISSING
  cd $MODELS
  for model in `echo qra/* lm/*`; do
    if [ -e $DIR/${model}$SUFFIX/$(basename $model).c ]; then
      diff_model $model
    else
      echo "$model (NOT FOUND)"
      echo ${model}.c >> ${QCLANG_STATUS}/C_NOT_FOUND
    fi
  done
}

cd ${QCLANG_STATUS}
# diff_model qra/product_3input_multidimensional
# run_qclang_on_model qra/abs_float

# diff_model lm/m37_boolean_casting
# diff_model qra/bus_assignSig1_selectSig1
diff_all_models
