#!/bin/bash

set -xue -o pipefail

cd $HOME
NEW_REPO=matisse-new

function grab_remote {
    git remote add temp "$1"
    git fetch temp "$2"
    git branch "$2" "temp/$2"
    git remote rm temp
}

function clone {
    TMP_REPO="/tmp/${1}"
    rm -rf $TMP_REPO
    git clone "git@github.com:analyzere/${1}.git" $TMP_REPO
    cd $TMP_REPO
}

function make_new_repo {
    # Initialize new repository
    rm -rf $NEW_REPO
    mkdir $NEW_REPO
    cd $NEW_REPO
    git init

    clone matisse
    git filter-repo \
        --path .gitmodules \
        --path arium-dashboards \
        --path reinsurance-standalone \
        --path adminpanel-starter \
        --invert-paths --force

    clone matisse-backend
    git filter-repo \
        --path src/main/java/are/ \
        --invert-paths --force
    git filter-repo --to-subdirectory-filter matisse-backend

    clone matisse-frontend
    grab_remote git@github.com:cgerrie/matisse-frontend.git issue-103-new-chart-x-axis-options
    cp -f package-lock.json /tmp/package-
    git filter-repo \
        --path app/ \
        --path src/ \
        --path apps/cap/ \
        --path UserGuide.pdf \
        --path data/ \
        --path q \
        --path yarn.lock \
        --path package-lock.json \
        --invert-paths --force
    git filter-repo --to-subdirectory-filter matisse-frontend
    cp /tmp/package-lock.json matisse-frontend/
    git add .
    git commit -m 'Re-add package-lock.json'

    # Order of pulls matters so, for example, the whole backend in the history of two frontend branches
    cd $NEW_REPO
    ARGS="--allow-unrelated-histories --no-edit"
    git pull /tmp/matisse master $ARGS
    git pull /tmp/matisse-backend master $ARGS
    git checkout -b issue-103-new-chart-x-axis-options
    git pull /tmp/matisse-frontend issue-103-new-chart-x-axis-options $ARGS
    git checkout master
    git pull /tmp/matisse-frontend master --allow-unrelated-histories $ARGS

    git remote add github git@github.com:analyzere/matisse-new.git
}

function aggressive_gc {
    # Delete references to the old history
    git for-each-ref --format='delete %(refname)' refs/original | git update-ref --stdin
    # Flag all deleted objects for garbage collection
    git reflog expire --expire=now --all
    # Garbage collect
    git gc --prune=now
}

make_new_repo
aggressive_gc
git-big-files
echo "DISK USAGE: $(du -sh .)"
