#!/bin/bash
set -e

NEW_REPO=$HOME/qvscribe-new
TMP_REPO=/tmp/tmp-git-repo
# We assume repo names have no whitespace
OLD_REPOS="$(ls -d $HOME/qvscribe/{core,msoffice,qts,pipeline-framework})"
BINARY_EXTENSIONS="exe|dll|mp4|zip|msi|cab|jar|dep"
SUBMODULES=git@git.internal.qracorp.com:qvscribe/resources.git

function make_new_repo {
    # Initialize new repository
    rm -rf $NEW_REPO
    mkdir $NEW_REPO
    cd $NEW_REPO
    git init
    git remote add origin git@git.internal.qracorp.com:qvscribe/qvscribe.git
    # For each repo, clone the repo, move contents to a subdir with same name, then merge into merged repo
    for repo in $OLD_REPOS; do
        cd $repo
        git pull origin master
        rm -rf $TMP_REPO
        git clone --branch master $repo $TMP_REPO
        cd $TMP_REPO
        mkdir TMP_DIR
        # Using find instead of ls to deal with whitespace in filenames
        # We want to move all files down one directory, careful to ignore .git, ., .., and dir itself
        find * .* -prune ! -name .git ! -name . ! -name .. ! -name TMP_DIR \
             -exec git mv "{}" TMP_DIR \;
        git mv TMP_DIR $(basename $repo)
        git commit -m "Moved all files to subdirectory $(basename $repo)"
        cd $NEW_REPO
        git pull $TMP_REPO master --allow-unrelated-histories --no-edit
    done
}

function delete_files {
    # For all files that look like binaries (expecially 3rd party), if
    # they are no longer in use, delete them from the git history
    ################################################################
    # Rewrite all of history, deleting binaries which we no longer
    # have in our repo
    ################################################################
    for repo in $OLD_REPOS; do
        REPO_LIST="$REPO_LIST|$(basename $repo)"
    done
    REPO_LIST="${REPO_LIST:1}"  # Delete leading |

    # the for loop should cycle through new-line separate args instead of space-separated
    IFS='
'
    # Loop through all file objects in the repo and extract filename paths
    for f in $(git rev-list --objects --all \
                   | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' \
                   | sed -n 's/^blob //p' \
                   | cut -f 3- -d ' '); do
        # If the file looks like a binary and is no longer used, slate it for deletion
        # We also ignore filenames with spaces since we are using space as a arg separator
        # angular/node_modules special cased below... do not double-dip
        if [[ "$f" =~ (\.($BINARY_EXTENSIONS)$) && ! -f "$f" && ! "$f" =~ " " && ! "$f" =~ "angular/node_modules" ]] ; then
            echo -n '' $f
        fi
    done
}

function aggressive_gc {
    # Delete references to the old history
    git for-each-ref --format='delete %(refname)' refs/original | git update-ref --stdin
    # Flag all deleted objects for garbarage collection
    git reflog expire --expire=now --all
    # Garbage collect
    git gc --prune=now
}

function delete_big_files {
    # git filter-branch --index-filter "git rm -rf --cached --ignore-unmatch angular/node_modules" HEAD
    # git for-each-ref --format='delete %(refname)' refs/original | git update-ref --stdin
    DELETE_FILES=$(delete_files)

    if [[ ! $DELETE_FILES ]]; then
        echo "NOTHING TO DELETE"
        return
    fi
    git filter-branch --index-filter "git rm -rf --cached --ignore-unmatch $DELETE_FILES angular/node_modules" HEAD
    aggressive_gc
}

function add_submodules {
    git submodule init
    for sub in $SUBMODULES; do
        git submodule add $sub
        git add .
        git commit -m "Adding submodule $(basename $sub)"
    done
}

function david_specific_changes {
    cp ~/tmp/Jenkinsfile .
    git add .
    git commit -m 'Commit Jenkinsfile'
    git tag combine-checkpoint
    for branch in david-test-merge david-test-no-merge david-test-qts-change; do
        git checkout -b $branch
    done
    ~/bin/do-plt
}

function do_it_all {
    make_new_repo
    delete_big_files
    add_submodules
    david_specific_changes
}

# for f in $(delete_files); do
#     echo $f
# done


# delete_files
# delete_big_files
# add_submodules

do_it_all
